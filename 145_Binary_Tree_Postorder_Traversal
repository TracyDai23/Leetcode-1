'''
99.9%

Traversal algorithm is interesting. Should pay attention on the iteration way.
'''

# iteration

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def postorderTraversal(self, root: TreeNode) -> List[int]:
        mid = []
        node = [root]
        output = []
        
        while node:
            curr = node.pop()

            if curr:
                mid.append(curr)
                node.append(curr.left)
                node.append(curr.right)
        
        while mid:
            output.append(mid.pop().val)
            
        return output
        
# recursion

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    
    def __init__(self):
        self.output = []
    
    def postorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        
        if root:
            self.postorderTraversal(root.left)
            self.postorderTraversal(root.right)
            self.output.append(root.val)
            
        return self.output
